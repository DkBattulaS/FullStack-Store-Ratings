-- Schema for Store Ratings App
-- Schema: app
-- ======================================
-- Users Table
CREATE TABLE app.users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(60) NOT NULL CHECK (char_length(name) >= 20 AND char_length(name) <= 60),
    email CITEXT NOT NULL UNIQUE CHECK (email ~* '^[A-Z0-9._%+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,}$'),
    password TEXT NOT NULL,
    address VARCHAR(400),
    role app.user_role NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Indexes for users
CREATE INDEX idx_users_name ON app.users (name);
CREATE INDEX idx_users_email ON app.users (email);
CREATE INDEX idx_users_role ON app.users (role);
CREATE INDEX idx_users_addr_trgm ON app.users USING gin (address gin_trgm_ops);

-- Trigger to auto-update timestamp
CREATE TRIGGER trg_users_updated
BEFORE UPDATE ON app.users
FOR EACH ROW EXECUTE FUNCTION app.set_updated_at();


-- Stores Table
CREATE TABLE app.stores (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(60) NOT NULL CHECK (char_length(name) >= 20 AND char_length(name) <= 60),
    email CITEXT NOT NULL UNIQUE CHECK (email ~* '^[A-Z0-9._%+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,}$'),
    address VARCHAR(400) NOT NULL CHECK (char_length(address) <= 400),
    owner_id BIGINT NOT NULL REFERENCES app.users(id) ON DELETE RESTRICT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    avg_rating NUMERIC(3,1) DEFAULT 0
);

-- Indexes for stores
CREATE INDEX idx_stores_name ON app.stores (name);
CREATE INDEX idx_stores_email ON app.stores (email);
CREATE INDEX idx_stores_addr_trgm ON app.stores USING gin (address gin_trgm_ops);

-- Triggers for stores
CREATE TRIGGER trg_stores_updated
BEFORE UPDATE ON app.stores
FOR EACH ROW EXECUTE FUNCTION app.set_updated_at();

CREATE TRIGGER trg_stores_owner_role
BEFORE INSERT OR UPDATE OF owner_id ON app.stores
FOR EACH ROW EXECUTE FUNCTION app.ensure_owner_role();


-- Ratings Table
CREATE TABLE app.ratings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES app.users(id) ON DELETE CASCADE,
    store_id BIGINT NOT NULL REFERENCES app.stores(id) ON DELETE CASCADE,
    rating NUMERIC(2,1) NOT NULL CHECK (rating >= 1 AND rating <= 5),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    rating_decimal NUMERIC(2,1),
    CONSTRAINT uq_user_store UNIQUE (user_id, store_id)
);

-- Indexes for ratings
CREATE INDEX idx_ratings_user_store ON app.ratings (user_id, store_id);

-- Triggers for ratings
CREATE TRIGGER trg_ratings_updated
BEFORE UPDATE ON app.ratings
FOR EACH ROW EXECUTE FUNCTION app.set_updated_at();

CREATE TRIGGER trg_ratings_user_role
BEFORE INSERT OR UPDATE OF user_id ON app.ratings
FOR EACH ROW EXECUTE FUNCTION app.ensure_rater_is_user();
